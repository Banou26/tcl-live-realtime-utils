using AntilopeGP.Configuration;
using AntilopeGP.Shared.Display;
using AntilopeGP.Shared.Map;
using AntilopeGP.Shared.MVVM;
using Esri.ArcGISRuntime.Xamarin.Forms;
using Prism.Behaviors;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Reflection;
using Telerik.XamarinForms.Primitives;
using Telerik.XamarinForms.Primitives.SideDrawer;
using Xamarin.Forms;
using Xamarin.Forms.Internals;
using Xamarin.Forms.PlatformConfiguration.iOSSpecific;
using Xamarin.Forms.Xaml;
using Xamarin.Forms.Xaml.Diagnostics;
using Xamarin.Forms.Xaml.Internals;

namespace AntilopeGP.Shared.Views
{
	[XamlCompilation(XamlCompilationOptions.Compile)]
	[XamlFilePath("Views\\MainPage.xaml")]
	public class MainPage : ContentPage
	{
		private Config _config;

		private MapManager _mapManager;

		private InsetsManager _insetsManager;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private ContentPage This;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private FlexLayout header;

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private MapView mapView;

		public MainPage(Config config, MapManager mapManager, InsetsManager insetsManager)
		{
			try
			{
				_insetsManager = insetsManager;
				_insetsManager.StartManagingInsets(this);
				InitializeComponent();
				_config = config;
				_mapManager = mapManager;
				InitializeMap();
			}
			catch (Exception)
			{
			}
		}

		private void InitializeMap()
		{
			_mapManager.InitWithMapView(mapView);
		}

		[GeneratedCode("Xamarin.Forms.Build.Tasks.XamlG", "2.0.0.0")]
		private void InitializeComponent()
		{
			if (ResourceLoader.CanProvideContentFor(new ResourceLoader.ResourceLoadingQuery
			{
				AssemblyName = typeof(MainPage).GetTypeInfo().Assembly.GetName(),
				ResourcePath = "Views/MainPage.xaml",
				Instance = this
			}))
			{
				__InitComponentRuntime();
				return;
			}
			if (XamlLoader.XamlFileProvider != null && XamlLoader.XamlFileProvider(GetType()) != null)
			{
				__InitComponentRuntime();
				return;
			}
			NegateBooleanConverter value = new NegateBooleanConverter();
			LoadStatusConverter value2 = new LoadStatusConverter();
			CountConverter value3 = new CountConverter();
			NinePlusConverter value4 = new NinePlusConverter();
			IsNotNullConverter value5 = new IsNotNullConverter();
			ResourceDictionary resourceDictionary = new ResourceDictionary();
			StaticResourceExtension staticResourceExtension = new StaticResourceExtension();
			BindingExtension bindingExtension = new BindingExtension();
			ConstraintExpression constraintExpression = new ConstraintExpression();
			BindingExtension bindingExtension2 = new BindingExtension();
			TapGestureRecognizer tapGestureRecognizer = new TapGestureRecognizer();
			Image image = new Image();
			StaticResourceExtension staticResourceExtension2 = new StaticResourceExtension();
			BindingExtension bindingExtension3 = new BindingExtension();
			Image image2 = new Image();
			StaticResourceExtension staticResourceExtension3 = new StaticResourceExtension();
			BindingExtension bindingExtension4 = new BindingExtension();
			StaticResourceExtension staticResourceExtension4 = new StaticResourceExtension();
			Label label = new Label();
			Grid grid = new Grid();
			AbsoluteLayout absoluteLayout = new AbsoluteLayout();
			Image image3 = new Image();
			BindingExtension bindingExtension5 = new BindingExtension();
			TapGestureRecognizer tapGestureRecognizer2 = new TapGestureRecognizer();
			Image image4 = new Image();
			StaticResourceExtension staticResourceExtension5 = new StaticResourceExtension();
			BindingExtension bindingExtension6 = new BindingExtension();
			Image image5 = new Image();
			StaticResourceExtension staticResourceExtension6 = new StaticResourceExtension();
			BindingExtension bindingExtension7 = new BindingExtension();
			StaticResourceExtension staticResourceExtension7 = new StaticResourceExtension();
			Label label2 = new Label();
			Grid grid2 = new Grid();
			AbsoluteLayout absoluteLayout2 = new AbsoluteLayout();
			FlexLayout flexLayout = new FlexLayout();
			ConstraintExpression constraintExpression2 = new ConstraintExpression();
			ConstraintExpression constraintExpression3 = new ConstraintExpression();
			BindingExtension bindingExtension8 = new BindingExtension();
			EventToCommandBehavior eventToCommandBehavior = new EventToCommandBehavior();
			MapView mapView = new MapView();
			ConstraintExpression constraintExpression4 = new ConstraintExpression();
			ConstraintExpression constraintExpression5 = new ConstraintExpression();
			ColumnDefinition columnDefinition = new ColumnDefinition();
			ColumnDefinition columnDefinition2 = new ColumnDefinition();
			ColumnDefinition columnDefinition3 = new ColumnDefinition();
			ReferenceExtension referenceExtension = new ReferenceExtension();
			BindingExtension bindingExtension9 = new BindingExtension();
			StaticResourceExtension staticResourceExtension8 = new StaticResourceExtension();
			StaticResourceExtension staticResourceExtension9 = new StaticResourceExtension();
			Label label3 = new Label();
			Image image6 = new Image();
			BindingExtension bindingExtension10 = new BindingExtension();
			ImageButton imageButton = new ImageButton();
			Grid grid3 = new Grid();
			ConstraintExpression constraintExpression6 = new ConstraintExpression();
			ConstraintExpression constraintExpression7 = new ConstraintExpression();
			BindingExtension bindingExtension11 = new BindingExtension();
			TapGestureRecognizer tapGestureRecognizer3 = new TapGestureRecognizer();
			ReferenceExtension referenceExtension2 = new ReferenceExtension();
			StaticResourceExtension staticResourceExtension10 = new StaticResourceExtension();
			BindingExtension bindingExtension12 = new BindingExtension();
			Image image7 = new Image();
			ReferenceExtension referenceExtension3 = new ReferenceExtension();
			BindingExtension bindingExtension13 = new BindingExtension();
			Image image8 = new Image();
			AbsoluteLayout absoluteLayout3 = new AbsoluteLayout();
			BindingExtension bindingExtension14 = new BindingExtension();
			BindingExtension bindingExtension15 = new BindingExtension();
			ImageButton imageButton2 = new ImageButton();
			BindingExtension bindingExtension16 = new BindingExtension();
			BindingExtension bindingExtension17 = new BindingExtension();
			ImageButton imageButton3 = new ImageButton();
			FlexLayout flexLayout2 = new FlexLayout();
			ConstraintExpression constraintExpression8 = new ConstraintExpression();
			BindingExtension bindingExtension18 = new BindingExtension();
			TapGestureRecognizer tapGestureRecognizer4 = new TapGestureRecognizer();
			StaticResourceExtension staticResourceExtension11 = new StaticResourceExtension();
			BindingExtension bindingExtension19 = new BindingExtension();
			Image image9 = new Image();
			BindingExtension bindingExtension20 = new BindingExtension();
			Image image10 = new Image();
			AbsoluteLayout absoluteLayout4 = new AbsoluteLayout();
			RelativeLayout relativeLayout = new RelativeLayout();
			PopupPage popupPage = new PopupPage();
			RadSideDrawer radSideDrawer = new RadSideDrawer();
			MainPage mainPage;
			NameScope nameScope = (NameScope)(NameScope.GetNameScope(mainPage = this) ?? new NameScope());
			NameScope.SetNameScope(mainPage, nameScope);
			((INameScope)nameScope).RegisterName("This", (object)mainPage);
			if (mainPage.StyleId == null)
			{
				mainPage.StyleId = "This";
			}
			((INameScope)nameScope).RegisterName("header", (object)flexLayout);
			if (flexLayout.StyleId == null)
			{
				flexLayout.StyleId = "header";
			}
			((INameScope)nameScope).RegisterName("mapView", (object)mapView);
			if (mapView.StyleId == null)
			{
				mapView.StyleId = "mapView";
			}
			This = mainPage;
			header = flexLayout;
			this.mapView = mapView;
			mainPage.Resources = resourceDictionary;
			VisualDiagnostics.RegisterSourceInfo(resourceDictionary, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 15, 10);
			resourceDictionary.Add("inverter", value);
			resourceDictionary.Add("loadStatusConverter", value2);
			resourceDictionary.Add("countConverter", value3);
			resourceDictionary.Add("ninePlusConverter", value4);
			resourceDictionary.Add("isNotNullConverter", value5);
			mainPage.SetValue(Xamarin.Forms.NavigationPage.HasNavigationBarProperty, false);
			mainPage.SetValue(Xamarin.Forms.PlatformConfiguration.iOSSpecific.Page.UseSafeAreaProperty, true);
			mainPage.Resources = resourceDictionary;
			VisualDiagnostics.RegisterSourceInfo(resourceDictionary, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 15, 10);
			radSideDrawer.SetValue(RadSideDrawer.DrawerLengthProperty, 170.0);
			radSideDrawer.SetValue(RadSideDrawer.DrawerLocationProperty, SideDrawerLocation.Bottom);
			radSideDrawer.SetValue(RadSideDrawer.DrawerTransitionTypeProperty, SideDrawerTransitionType.SlideInOnTop);
			radSideDrawer.SetValue(RadSideDrawer.DrawerTransitionFadeOpacityProperty, 0.0);
			radSideDrawer.SetValue(RadSideDrawer.AreGesturesEnabledProperty, false);
			staticResourceExtension.Key = "isNotNullConverter";
			XamlServiceProvider xamlServiceProvider = new XamlServiceProvider();
			Type typeFromHandle = typeof(IProvideValueTarget);
			object[] array = new object[0 + 3];
			array[0] = bindingExtension;
			array[1] = radSideDrawer;
			array[2] = mainPage;
			object service;
			xamlServiceProvider.Add(typeFromHandle, service = new SimpleValueTargetProvider(array, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider.Add(typeof(IReferenceProvider), service);
			Type typeFromHandle2 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver = new XmlNamespaceResolver();
			xmlNamespaceResolver.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider.Add(typeFromHandle2, new XamlTypeResolver(xmlNamespaceResolver, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(28, 38)));
			object target = bindingExtension.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension).ProvideValue((IServiceProvider)xamlServiceProvider);
			VisualDiagnostics.RegisterSourceInfo(target, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 28, 38);
			bindingExtension.Mode = BindingMode.TwoWay;
			bindingExtension.Path = "SelectedVehicule";
			BindingBase binding = ((IMarkupExtension<BindingBase>)bindingExtension).ProvideValue((IServiceProvider)null);
			radSideDrawer.SetBinding(RadSideDrawer.IsOpenProperty, binding);
			relativeLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			relativeLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.FillAndExpand);
			constraintExpression.Type = ConstraintType.RelativeToParent;
			constraintExpression.Property = "Width";
			constraintExpression.Factor = 1.0;
			XamlServiceProvider xamlServiceProvider2 = new XamlServiceProvider();
			Type typeFromHandle3 = typeof(IProvideValueTarget);
			object[] array2 = new object[0 + 4];
			array2[0] = flexLayout;
			array2[1] = relativeLayout;
			array2[2] = radSideDrawer;
			array2[3] = mainPage;
			object service2;
			xamlServiceProvider2.Add(typeFromHandle3, service2 = new SimpleValueTargetProvider(array2, RelativeLayout.WidthConstraintProperty, nameScope));
			xamlServiceProvider2.Add(typeof(IReferenceProvider), service2);
			Type typeFromHandle4 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver2 = new XmlNamespaceResolver();
			xmlNamespaceResolver2.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver2.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver2.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver2.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver2.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver2.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver2.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver2.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider2.Add(typeFromHandle4, new XamlTypeResolver(xmlNamespaceResolver2, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider2.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(41, 29)));
			Constraint constraint = ((IMarkupExtension<Constraint>)constraintExpression).ProvideValue((IServiceProvider)xamlServiceProvider2);
			flexLayout.SetValue(RelativeLayout.WidthConstraintProperty, constraint);
			VisualDiagnostics.RegisterSourceInfo(constraint, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 41, 29);
			flexLayout.SetValue(RelativeLayout.HeightConstraintProperty, Constraint.Constant(70.0));
			flexLayout.SetValue(FlexLayout.DirectionProperty, new FlexDirectionTypeConverter().ConvertFromInvariantString("Row"));
			flexLayout.SetValue(FlexLayout.AlignItemsProperty, new FlexAlignItemsTypeConverter().ConvertFromInvariantString("Center"));
			flexLayout.SetValue(FlexLayout.JustifyContentProperty, new FlexJustifyTypeConverter().ConvertFromInvariantString("SpaceBetween"));
			flexLayout.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.White);
			absoluteLayout.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			absoluteLayout.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			absoluteLayout.SetValue(View.MarginProperty, new Thickness(15.0, 0.0));
			absoluteLayout.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			absoluteLayout.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 50.0);
			bindingExtension2.Path = "FiltreMenuTapCommand";
			BindingBase binding2 = ((IMarkupExtension<BindingBase>)bindingExtension2).ProvideValue((IServiceProvider)null);
			tapGestureRecognizer.SetBinding(TapGestureRecognizer.CommandProperty, binding2);
			absoluteLayout.GestureRecognizers.Add(tapGestureRecognizer);
			VisualDiagnostics.RegisterSourceInfo(tapGestureRecognizer, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 66, 30);
			image.SetValue(AbsoluteLayout.LayoutBoundsProperty, new Rectangle(10.0, 10.0, 30.0, 30.0));
			image.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("filtre.png"));
			absoluteLayout.Children.Add(image);
			VisualDiagnostics.RegisterSourceInfo(image, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 52, 26);
			grid.SetValue(AbsoluteLayout.LayoutBoundsProperty, new Rectangle(1.0, 0.0, 20.0, 20.0));
			grid.SetValue(AbsoluteLayout.LayoutFlagsProperty, AbsoluteLayoutFlags.PositionProportional);
			staticResourceExtension2.Key = "countConverter";
			XamlServiceProvider xamlServiceProvider3 = new XamlServiceProvider();
			Type typeFromHandle5 = typeof(IProvideValueTarget);
			object[] array3 = new object[0 + 7];
			array3[0] = bindingExtension3;
			array3[1] = grid;
			array3[2] = absoluteLayout;
			array3[3] = flexLayout;
			array3[4] = relativeLayout;
			array3[5] = radSideDrawer;
			array3[6] = mainPage;
			object service3;
			xamlServiceProvider3.Add(typeFromHandle5, service3 = new SimpleValueTargetProvider(array3, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider3.Add(typeof(IReferenceProvider), service3);
			Type typeFromHandle6 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver3 = new XmlNamespaceResolver();
			xmlNamespaceResolver3.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver3.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver3.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver3.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver3.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver3.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver3.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver3.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider3.Add(typeFromHandle6, new XamlTypeResolver(xmlNamespaceResolver3, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider3.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(56, 32)));
			object target2 = bindingExtension3.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension2).ProvideValue((IServiceProvider)xamlServiceProvider3);
			VisualDiagnostics.RegisterSourceInfo(target2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 56, 32);
			bindingExtension3.ConverterParameter = "TrueIfAny";
			bindingExtension3.Path = "MapManager.Lignes";
			BindingBase binding3 = ((IMarkupExtension<BindingBase>)bindingExtension3).ProvideValue((IServiceProvider)null);
			grid.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding3);
			image2.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("badgeheader.png"));
			grid.Children.Add(image2);
			VisualDiagnostics.RegisterSourceInfo(image2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 57, 30);
			label.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			staticResourceExtension3.Key = "ninePlusConverter";
			XamlServiceProvider xamlServiceProvider4 = new XamlServiceProvider();
			Type typeFromHandle7 = typeof(IProvideValueTarget);
			object[] array4 = new object[0 + 8];
			array4[0] = bindingExtension4;
			array4[1] = label;
			array4[2] = grid;
			array4[3] = absoluteLayout;
			array4[4] = flexLayout;
			array4[5] = relativeLayout;
			array4[6] = radSideDrawer;
			array4[7] = mainPage;
			object service4;
			xamlServiceProvider4.Add(typeFromHandle7, service4 = new SimpleValueTargetProvider(array4, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider4.Add(typeof(IReferenceProvider), service4);
			Type typeFromHandle8 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver4 = new XmlNamespaceResolver();
			xmlNamespaceResolver4.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver4.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver4.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver4.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver4.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver4.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver4.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver4.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider4.Add(typeFromHandle8, new XamlTypeResolver(xmlNamespaceResolver4, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider4.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(60, 36)));
			object target3 = bindingExtension4.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension3).ProvideValue((IServiceProvider)xamlServiceProvider4);
			VisualDiagnostics.RegisterSourceInfo(target3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 60, 36);
			bindingExtension4.Path = "MapManager.Lignes.Count";
			BindingBase binding4 = ((IMarkupExtension<BindingBase>)bindingExtension4).ProvideValue((IServiceProvider)null);
			label.SetBinding(Label.TextProperty, binding4);
			staticResourceExtension4.Key = "TCLRegular";
			XamlServiceProvider xamlServiceProvider5 = new XamlServiceProvider();
			Type typeFromHandle9 = typeof(IProvideValueTarget);
			object[] array5 = new object[0 + 7];
			array5[0] = label;
			array5[1] = grid;
			array5[2] = absoluteLayout;
			array5[3] = flexLayout;
			array5[4] = relativeLayout;
			array5[5] = radSideDrawer;
			array5[6] = mainPage;
			object service5;
			xamlServiceProvider5.Add(typeFromHandle9, service5 = new SimpleValueTargetProvider(array5, Label.FontFamilyProperty, nameScope));
			xamlServiceProvider5.Add(typeof(IReferenceProvider), service5);
			Type typeFromHandle10 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver5 = new XmlNamespaceResolver();
			xmlNamespaceResolver5.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver5.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver5.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver5.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver5.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver5.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver5.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver5.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider5.Add(typeFromHandle10, new XamlTypeResolver(xmlNamespaceResolver5, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider5.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(61, 36)));
			object target4 = label.FontFamily = (string)((IMarkupExtension)staticResourceExtension4).ProvideValue((IServiceProvider)xamlServiceProvider5);
			VisualDiagnostics.RegisterSourceInfo(target4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 61, 36);
			BindableProperty fontSizeProperty = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider6 = new XamlServiceProvider();
			Type typeFromHandle11 = typeof(IProvideValueTarget);
			object[] array6 = new object[0 + 7];
			array6[0] = label;
			array6[1] = grid;
			array6[2] = absoluteLayout;
			array6[3] = flexLayout;
			array6[4] = relativeLayout;
			array6[5] = radSideDrawer;
			array6[6] = mainPage;
			object service6;
			xamlServiceProvider6.Add(typeFromHandle11, service6 = new SimpleValueTargetProvider(array6, Label.FontSizeProperty, nameScope));
			xamlServiceProvider6.Add(typeof(IReferenceProvider), service6);
			Type typeFromHandle12 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver6 = new XmlNamespaceResolver();
			xmlNamespaceResolver6.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver6.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver6.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver6.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver6.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver6.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver6.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver6.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider6.Add(typeFromHandle12, new XamlTypeResolver(xmlNamespaceResolver6, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider6.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(62, 36)));
			label.SetValue(fontSizeProperty, ((IExtendedTypeConverter)fontSizeConverter).ConvertFromInvariantString("13", (IServiceProvider)xamlServiceProvider6));
			label.SetValue(Label.TextColorProperty, Color.White);
			grid.Children.Add(label);
			VisualDiagnostics.RegisterSourceInfo(label, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 58, 30);
			absoluteLayout.Children.Add(grid);
			VisualDiagnostics.RegisterSourceInfo(grid, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 54, 26);
			flexLayout.Children.Add(absoluteLayout);
			VisualDiagnostics.RegisterSourceInfo(absoluteLayout, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 47, 22);
			image3.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 40.0);
			image3.SetValue(Image.AspectProperty, Aspect.AspectFit);
			image3.SetValue(FlexLayout.GrowProperty, 1f);
			image3.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("logoheader.png"));
			flexLayout.Children.Add(image3);
			VisualDiagnostics.RegisterSourceInfo(image3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 69, 22);
			absoluteLayout2.SetValue(View.VerticalOptionsProperty, LayoutOptions.FillAndExpand);
			absoluteLayout2.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			absoluteLayout2.SetValue(View.MarginProperty, new Thickness(15.0, 0.0));
			absoluteLayout2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			absoluteLayout2.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 50.0);
			bindingExtension5.Path = "FavorisMenuTapCommand";
			BindingBase binding5 = ((IMarkupExtension<BindingBase>)bindingExtension5).ProvideValue((IServiceProvider)null);
			tapGestureRecognizer2.SetBinding(TapGestureRecognizer.CommandProperty, binding5);
			absoluteLayout2.GestureRecognizers.Add(tapGestureRecognizer2);
			VisualDiagnostics.RegisterSourceInfo(tapGestureRecognizer2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 92, 30);
			image4.SetValue(AbsoluteLayout.LayoutBoundsProperty, new Rectangle(10.0, 10.0, 30.0, 30.0));
			image4.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("favoris.png"));
			absoluteLayout2.Children.Add(image4);
			VisualDiagnostics.RegisterSourceInfo(image4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 78, 26);
			grid2.SetValue(AbsoluteLayout.LayoutBoundsProperty, new Rectangle(1.0, 0.0, 20.0, 20.0));
			grid2.SetValue(AbsoluteLayout.LayoutFlagsProperty, AbsoluteLayoutFlags.PositionProportional);
			staticResourceExtension5.Key = "countConverter";
			XamlServiceProvider xamlServiceProvider7 = new XamlServiceProvider();
			Type typeFromHandle13 = typeof(IProvideValueTarget);
			object[] array7 = new object[0 + 7];
			array7[0] = bindingExtension6;
			array7[1] = grid2;
			array7[2] = absoluteLayout2;
			array7[3] = flexLayout;
			array7[4] = relativeLayout;
			array7[5] = radSideDrawer;
			array7[6] = mainPage;
			object service7;
			xamlServiceProvider7.Add(typeFromHandle13, service7 = new SimpleValueTargetProvider(array7, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider7.Add(typeof(IReferenceProvider), service7);
			Type typeFromHandle14 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver7 = new XmlNamespaceResolver();
			xmlNamespaceResolver7.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver7.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver7.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver7.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver7.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver7.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver7.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver7.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider7.Add(typeFromHandle14, new XamlTypeResolver(xmlNamespaceResolver7, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider7.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(82, 32)));
			object target5 = bindingExtension6.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension5).ProvideValue((IServiceProvider)xamlServiceProvider7);
			VisualDiagnostics.RegisterSourceInfo(target5, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 82, 32);
			bindingExtension6.ConverterParameter = "TrueIfAny";
			bindingExtension6.Path = "FavorisCount";
			BindingBase binding6 = ((IMarkupExtension<BindingBase>)bindingExtension6).ProvideValue((IServiceProvider)null);
			grid2.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding6);
			image5.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("badgeheader.png"));
			grid2.Children.Add(image5);
			VisualDiagnostics.RegisterSourceInfo(image5, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 83, 30);
			label2.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label2.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			staticResourceExtension6.Key = "ninePlusConverter";
			XamlServiceProvider xamlServiceProvider8 = new XamlServiceProvider();
			Type typeFromHandle15 = typeof(IProvideValueTarget);
			object[] array8 = new object[0 + 8];
			array8[0] = bindingExtension7;
			array8[1] = label2;
			array8[2] = grid2;
			array8[3] = absoluteLayout2;
			array8[4] = flexLayout;
			array8[5] = relativeLayout;
			array8[6] = radSideDrawer;
			array8[7] = mainPage;
			object service8;
			xamlServiceProvider8.Add(typeFromHandle15, service8 = new SimpleValueTargetProvider(array8, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider8.Add(typeof(IReferenceProvider), service8);
			Type typeFromHandle16 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver8 = new XmlNamespaceResolver();
			xmlNamespaceResolver8.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver8.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver8.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver8.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver8.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver8.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver8.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver8.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider8.Add(typeFromHandle16, new XamlTypeResolver(xmlNamespaceResolver8, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider8.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(86, 36)));
			object target6 = bindingExtension7.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension6).ProvideValue((IServiceProvider)xamlServiceProvider8);
			VisualDiagnostics.RegisterSourceInfo(target6, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 86, 36);
			bindingExtension7.Path = "FavorisCount";
			BindingBase binding7 = ((IMarkupExtension<BindingBase>)bindingExtension7).ProvideValue((IServiceProvider)null);
			label2.SetBinding(Label.TextProperty, binding7);
			staticResourceExtension7.Key = "TCLRegular";
			XamlServiceProvider xamlServiceProvider9 = new XamlServiceProvider();
			Type typeFromHandle17 = typeof(IProvideValueTarget);
			object[] array9 = new object[0 + 7];
			array9[0] = label2;
			array9[1] = grid2;
			array9[2] = absoluteLayout2;
			array9[3] = flexLayout;
			array9[4] = relativeLayout;
			array9[5] = radSideDrawer;
			array9[6] = mainPage;
			object service9;
			xamlServiceProvider9.Add(typeFromHandle17, service9 = new SimpleValueTargetProvider(array9, Label.FontFamilyProperty, nameScope));
			xamlServiceProvider9.Add(typeof(IReferenceProvider), service9);
			Type typeFromHandle18 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver9 = new XmlNamespaceResolver();
			xmlNamespaceResolver9.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver9.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver9.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver9.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver9.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver9.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver9.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver9.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider9.Add(typeFromHandle18, new XamlTypeResolver(xmlNamespaceResolver9, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider9.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(87, 36)));
			object target7 = label2.FontFamily = (string)((IMarkupExtension)staticResourceExtension7).ProvideValue((IServiceProvider)xamlServiceProvider9);
			VisualDiagnostics.RegisterSourceInfo(target7, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 87, 36);
			BindableProperty fontSizeProperty2 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter2 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider10 = new XamlServiceProvider();
			Type typeFromHandle19 = typeof(IProvideValueTarget);
			object[] array10 = new object[0 + 7];
			array10[0] = label2;
			array10[1] = grid2;
			array10[2] = absoluteLayout2;
			array10[3] = flexLayout;
			array10[4] = relativeLayout;
			array10[5] = radSideDrawer;
			array10[6] = mainPage;
			object service10;
			xamlServiceProvider10.Add(typeFromHandle19, service10 = new SimpleValueTargetProvider(array10, Label.FontSizeProperty, nameScope));
			xamlServiceProvider10.Add(typeof(IReferenceProvider), service10);
			Type typeFromHandle20 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver10 = new XmlNamespaceResolver();
			xmlNamespaceResolver10.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver10.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver10.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver10.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver10.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver10.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver10.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver10.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider10.Add(typeFromHandle20, new XamlTypeResolver(xmlNamespaceResolver10, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider10.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(88, 36)));
			label2.SetValue(fontSizeProperty2, ((IExtendedTypeConverter)fontSizeConverter2).ConvertFromInvariantString("13", (IServiceProvider)xamlServiceProvider10));
			label2.SetValue(Label.TextColorProperty, Color.White);
			grid2.Children.Add(label2);
			VisualDiagnostics.RegisterSourceInfo(label2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 84, 30);
			absoluteLayout2.Children.Add(grid2);
			VisualDiagnostics.RegisterSourceInfo(grid2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 80, 26);
			flexLayout.Children.Add(absoluteLayout2);
			VisualDiagnostics.RegisterSourceInfo(absoluteLayout2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 73, 22);
			((ICollection<View>)relativeLayout.Children).Add((View)flexLayout);
			VisualDiagnostics.RegisterSourceInfo(flexLayout, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 40, 18);
			mapView.SetValue(RelativeLayout.YConstraintProperty, Constraint.Constant(70.0));
			constraintExpression2.Type = ConstraintType.RelativeToParent;
			constraintExpression2.Property = "Width";
			constraintExpression2.Factor = 1.0;
			XamlServiceProvider xamlServiceProvider11 = new XamlServiceProvider();
			Type typeFromHandle21 = typeof(IProvideValueTarget);
			object[] array11 = new object[0 + 4];
			array11[0] = mapView;
			array11[1] = relativeLayout;
			array11[2] = radSideDrawer;
			array11[3] = mainPage;
			object service11;
			xamlServiceProvider11.Add(typeFromHandle21, service11 = new SimpleValueTargetProvider(array11, RelativeLayout.WidthConstraintProperty, nameScope));
			xamlServiceProvider11.Add(typeof(IReferenceProvider), service11);
			Type typeFromHandle22 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver11 = new XmlNamespaceResolver();
			xmlNamespaceResolver11.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver11.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver11.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver11.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver11.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver11.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver11.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver11.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider11.Add(typeFromHandle22, new XamlTypeResolver(xmlNamespaceResolver11, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider11.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(98, 33)));
			Constraint constraint2 = ((IMarkupExtension<Constraint>)constraintExpression2).ProvideValue((IServiceProvider)xamlServiceProvider11);
			mapView.SetValue(RelativeLayout.WidthConstraintProperty, constraint2);
			VisualDiagnostics.RegisterSourceInfo(constraint2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 98, 33);
			constraintExpression3.Type = ConstraintType.RelativeToParent;
			constraintExpression3.Property = "Height";
			constraintExpression3.Factor = 1.0;
			XamlServiceProvider xamlServiceProvider12 = new XamlServiceProvider();
			Type typeFromHandle23 = typeof(IProvideValueTarget);
			object[] array12 = new object[0 + 4];
			array12[0] = mapView;
			array12[1] = relativeLayout;
			array12[2] = radSideDrawer;
			array12[3] = mainPage;
			object service12;
			xamlServiceProvider12.Add(typeFromHandle23, service12 = new SimpleValueTargetProvider(array12, RelativeLayout.HeightConstraintProperty, nameScope));
			xamlServiceProvider12.Add(typeof(IReferenceProvider), service12);
			Type typeFromHandle24 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver12 = new XmlNamespaceResolver();
			xmlNamespaceResolver12.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver12.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver12.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver12.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver12.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver12.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver12.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver12.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider12.Add(typeFromHandle24, new XamlTypeResolver(xmlNamespaceResolver12, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider12.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(99, 33)));
			Constraint constraint3 = ((IMarkupExtension<Constraint>)constraintExpression3).ProvideValue((IServiceProvider)xamlServiceProvider12);
			mapView.SetValue(RelativeLayout.HeightConstraintProperty, constraint3);
			VisualDiagnostics.RegisterSourceInfo(constraint3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 99, 33);
			mapView.SetValue(GeoView.IsAttributionTextVisibleProperty, false);
			eventToCommandBehavior.SetValue(EventToCommandBehavior.EventNameProperty, "GeoViewTapped");
			bindingExtension8.Path = "GeoViewTapCommand";
			BindingBase binding8 = ((IMarkupExtension<BindingBase>)bindingExtension8).ProvideValue((IServiceProvider)null);
			eventToCommandBehavior.SetBinding(EventToCommandBehavior.CommandProperty, binding8);
			eventToCommandBehavior.SetValue(EventToCommandBehavior.EventArgsParameterPathProperty, "Position");
			((ICollection<Behavior>)mapView.GetValue(Xamarin.Forms.VisualElement.BehaviorsProperty)).Add((Behavior)eventToCommandBehavior);
			VisualDiagnostics.RegisterSourceInfo(eventToCommandBehavior, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 102, 26);
			((ICollection<View>)relativeLayout.Children).Add((View)mapView);
			VisualDiagnostics.RegisterSourceInfo(mapView, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 96, 18);
			constraintExpression4.Type = ConstraintType.RelativeToParent;
			constraintExpression4.Property = "Height";
			constraintExpression4.Factor = 1.0;
			constraintExpression4.Constant = -50.0;
			XamlServiceProvider xamlServiceProvider13 = new XamlServiceProvider();
			Type typeFromHandle25 = typeof(IProvideValueTarget);
			object[] array13 = new object[0 + 4];
			array13[0] = grid3;
			array13[1] = relativeLayout;
			array13[2] = radSideDrawer;
			array13[3] = mainPage;
			object service13;
			xamlServiceProvider13.Add(typeFromHandle25, service13 = new SimpleValueTargetProvider(array13, RelativeLayout.YConstraintProperty, nameScope));
			xamlServiceProvider13.Add(typeof(IReferenceProvider), service13);
			Type typeFromHandle26 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver13 = new XmlNamespaceResolver();
			xmlNamespaceResolver13.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver13.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver13.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver13.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver13.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver13.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver13.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver13.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider13.Add(typeFromHandle26, new XamlTypeResolver(xmlNamespaceResolver13, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider13.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(107, 24)));
			Constraint constraint4 = ((IMarkupExtension<Constraint>)constraintExpression4).ProvideValue((IServiceProvider)xamlServiceProvider13);
			grid3.SetValue(RelativeLayout.YConstraintProperty, constraint4);
			VisualDiagnostics.RegisterSourceInfo(constraint4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 107, 24);
			constraintExpression5.Type = ConstraintType.RelativeToParent;
			constraintExpression5.Property = "Width";
			constraintExpression5.Factor = 1.0;
			XamlServiceProvider xamlServiceProvider14 = new XamlServiceProvider();
			Type typeFromHandle27 = typeof(IProvideValueTarget);
			object[] array14 = new object[0 + 4];
			array14[0] = grid3;
			array14[1] = relativeLayout;
			array14[2] = radSideDrawer;
			array14[3] = mainPage;
			object service14;
			xamlServiceProvider14.Add(typeFromHandle27, service14 = new SimpleValueTargetProvider(array14, RelativeLayout.WidthConstraintProperty, nameScope));
			xamlServiceProvider14.Add(typeof(IReferenceProvider), service14);
			Type typeFromHandle28 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver14 = new XmlNamespaceResolver();
			xmlNamespaceResolver14.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver14.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver14.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver14.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver14.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver14.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver14.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver14.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider14.Add(typeFromHandle28, new XamlTypeResolver(xmlNamespaceResolver14, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider14.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(108, 24)));
			Constraint constraint5 = ((IMarkupExtension<Constraint>)constraintExpression5).ProvideValue((IServiceProvider)xamlServiceProvider14);
			grid3.SetValue(RelativeLayout.WidthConstraintProperty, constraint5);
			VisualDiagnostics.RegisterSourceInfo(constraint5, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 108, 24);
			grid3.SetValue(RelativeLayout.HeightConstraintProperty, Constraint.Constant(50.0));
			grid3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, new Color(1.0, 1.0, 1.0, 0.66666668653488159));
			columnDefinition.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("55"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition);
			columnDefinition2.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("*"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition2);
			columnDefinition3.SetValue(ColumnDefinition.WidthProperty, new GridLengthTypeConverter().ConvertFromInvariantString("55"));
			((DefinitionCollection<ColumnDefinition>)grid3.GetValue(Grid.ColumnDefinitionsProperty)).Add(columnDefinition3);
			label3.SetValue(Grid.ColumnProperty, 1);
			label3.SetValue(Label.VerticalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			label3.SetValue(Label.HorizontalTextAlignmentProperty, new TextAlignmentConverter().ConvertFromInvariantString("Center"));
			referenceExtension.Name = "mapView";
			XamlServiceProvider xamlServiceProvider15 = new XamlServiceProvider();
			Type typeFromHandle29 = typeof(IProvideValueTarget);
			object[] array15 = new object[0 + 5];
			array15[0] = label3;
			array15[1] = grid3;
			array15[2] = relativeLayout;
			array15[3] = radSideDrawer;
			array15[4] = mainPage;
			object service15;
			xamlServiceProvider15.Add(typeFromHandle29, service15 = new SimpleValueTargetProvider(array15, BindableObject.BindingContextProperty, nameScope));
			xamlServiceProvider15.Add(typeof(IReferenceProvider), service15);
			Type typeFromHandle30 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver15 = new XmlNamespaceResolver();
			xmlNamespaceResolver15.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver15.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver15.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver15.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver15.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver15.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver15.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver15.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider15.Add(typeFromHandle30, new XamlTypeResolver(xmlNamespaceResolver15, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider15.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(119, 28)));
			object obj = ((IMarkupExtension)referenceExtension).ProvideValue((IServiceProvider)xamlServiceProvider15);
			label3.SetValue(BindableObject.BindingContextProperty, obj);
			VisualDiagnostics.RegisterSourceInfo(obj, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 119, 28);
			bindingExtension9.StringFormat = "2020 © TCL SYTRAL - {0}";
			bindingExtension9.Path = "AttributionText";
			BindingBase binding9 = ((IMarkupExtension<BindingBase>)bindingExtension9).ProvideValue((IServiceProvider)null);
			label3.SetBinding(Label.TextProperty, binding9);
			staticResourceExtension8.Key = "DarkGrayColor";
			XamlServiceProvider xamlServiceProvider16 = new XamlServiceProvider();
			Type typeFromHandle31 = typeof(IProvideValueTarget);
			object[] array16 = new object[0 + 5];
			array16[0] = label3;
			array16[1] = grid3;
			array16[2] = relativeLayout;
			array16[3] = radSideDrawer;
			array16[4] = mainPage;
			object service16;
			xamlServiceProvider16.Add(typeFromHandle31, service16 = new SimpleValueTargetProvider(array16, Label.TextColorProperty, nameScope));
			xamlServiceProvider16.Add(typeof(IReferenceProvider), service16);
			Type typeFromHandle32 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver16 = new XmlNamespaceResolver();
			xmlNamespaceResolver16.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver16.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver16.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver16.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver16.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver16.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver16.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver16.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider16.Add(typeFromHandle32, new XamlTypeResolver(xmlNamespaceResolver16, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider16.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(121, 28)));
			object obj2 = ((IMarkupExtension)staticResourceExtension8).ProvideValue((IServiceProvider)xamlServiceProvider16);
			label3.TextColor = (Color)obj2;
			VisualDiagnostics.RegisterSourceInfo(obj2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 121, 28);
			staticResourceExtension9.Key = "TCLLight";
			XamlServiceProvider xamlServiceProvider17 = new XamlServiceProvider();
			Type typeFromHandle33 = typeof(IProvideValueTarget);
			object[] array17 = new object[0 + 5];
			array17[0] = label3;
			array17[1] = grid3;
			array17[2] = relativeLayout;
			array17[3] = radSideDrawer;
			array17[4] = mainPage;
			object service17;
			xamlServiceProvider17.Add(typeFromHandle33, service17 = new SimpleValueTargetProvider(array17, Label.FontFamilyProperty, nameScope));
			xamlServiceProvider17.Add(typeof(IReferenceProvider), service17);
			Type typeFromHandle34 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver17 = new XmlNamespaceResolver();
			xmlNamespaceResolver17.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver17.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver17.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver17.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver17.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver17.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver17.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver17.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider17.Add(typeFromHandle34, new XamlTypeResolver(xmlNamespaceResolver17, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider17.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(122, 28)));
			object target8 = label3.FontFamily = (string)((IMarkupExtension)staticResourceExtension9).ProvideValue((IServiceProvider)xamlServiceProvider17);
			VisualDiagnostics.RegisterSourceInfo(target8, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 122, 28);
			BindableProperty fontSizeProperty3 = Label.FontSizeProperty;
			FontSizeConverter fontSizeConverter3 = new FontSizeConverter();
			XamlServiceProvider xamlServiceProvider18 = new XamlServiceProvider();
			Type typeFromHandle35 = typeof(IProvideValueTarget);
			object[] array18 = new object[0 + 5];
			array18[0] = label3;
			array18[1] = grid3;
			array18[2] = relativeLayout;
			array18[3] = radSideDrawer;
			array18[4] = mainPage;
			object service18;
			xamlServiceProvider18.Add(typeFromHandle35, service18 = new SimpleValueTargetProvider(array18, Label.FontSizeProperty, nameScope));
			xamlServiceProvider18.Add(typeof(IReferenceProvider), service18);
			Type typeFromHandle36 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver18 = new XmlNamespaceResolver();
			xmlNamespaceResolver18.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver18.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver18.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver18.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver18.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver18.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver18.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver18.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider18.Add(typeFromHandle36, new XamlTypeResolver(xmlNamespaceResolver18, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider18.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(123, 28)));
			label3.SetValue(fontSizeProperty3, ((IExtendedTypeConverter)fontSizeConverter3).ConvertFromInvariantString("12", (IServiceProvider)xamlServiceProvider18));
			grid3.Children.Add(label3);
			VisualDiagnostics.RegisterSourceInfo(label3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 116, 22);
			image6.SetValue(View.MarginProperty, new Thickness(0.0, 10.0));
			image6.SetValue(View.HorizontalOptionsProperty, LayoutOptions.End);
			image6.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("logo.png"));
			grid3.Children.Add(image6);
			VisualDiagnostics.RegisterSourceInfo(image6, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 124, 22);
			imageButton.SetValue(Grid.ColumnProperty, 2);
			imageButton.SetValue(View.MarginProperty, new Thickness(0.0, 10.0));
			imageButton.SetValue(View.HorizontalOptionsProperty, LayoutOptions.Start);
			imageButton.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			imageButton.SetValue(ImageButton.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("info.png"));
			bindingExtension10.Path = "InfoButtonTapCommand";
			BindingBase binding10 = ((IMarkupExtension<BindingBase>)bindingExtension10).ProvideValue((IServiceProvider)null);
			imageButton.SetBinding(ImageButton.CommandProperty, binding10);
			grid3.Children.Add(imageButton);
			VisualDiagnostics.RegisterSourceInfo(imageButton, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 127, 22);
			((ICollection<View>)relativeLayout.Children).Add((View)grid3);
			VisualDiagnostics.RegisterSourceInfo(grid3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 107, 18);
			constraintExpression6.Type = ConstraintType.RelativeToParent;
			constraintExpression6.Property = "Width";
			constraintExpression6.Constant = -65.0;
			XamlServiceProvider xamlServiceProvider19 = new XamlServiceProvider();
			Type typeFromHandle37 = typeof(IProvideValueTarget);
			object[] array19 = new object[0 + 4];
			array19[0] = absoluteLayout3;
			array19[1] = relativeLayout;
			array19[2] = radSideDrawer;
			array19[3] = mainPage;
			object service19;
			xamlServiceProvider19.Add(typeFromHandle37, service19 = new SimpleValueTargetProvider(array19, RelativeLayout.XConstraintProperty, nameScope));
			xamlServiceProvider19.Add(typeof(IReferenceProvider), service19);
			Type typeFromHandle38 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver19 = new XmlNamespaceResolver();
			xmlNamespaceResolver19.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver19.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver19.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver19.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver19.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver19.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver19.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver19.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider19.Add(typeFromHandle38, new XamlTypeResolver(xmlNamespaceResolver19, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider19.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(135, 33)));
			Constraint constraint6 = ((IMarkupExtension<Constraint>)constraintExpression6).ProvideValue((IServiceProvider)xamlServiceProvider19);
			absoluteLayout3.SetValue(RelativeLayout.XConstraintProperty, constraint6);
			VisualDiagnostics.RegisterSourceInfo(constraint6, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 135, 33);
			constraintExpression7.Type = ConstraintType.RelativeToParent;
			constraintExpression7.Property = "Height";
			constraintExpression7.Constant = -120.0;
			XamlServiceProvider xamlServiceProvider20 = new XamlServiceProvider();
			Type typeFromHandle39 = typeof(IProvideValueTarget);
			object[] array20 = new object[0 + 4];
			array20[0] = absoluteLayout3;
			array20[1] = relativeLayout;
			array20[2] = radSideDrawer;
			array20[3] = mainPage;
			object service20;
			xamlServiceProvider20.Add(typeFromHandle39, service20 = new SimpleValueTargetProvider(array20, RelativeLayout.YConstraintProperty, nameScope));
			xamlServiceProvider20.Add(typeof(IReferenceProvider), service20);
			Type typeFromHandle40 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver20 = new XmlNamespaceResolver();
			xmlNamespaceResolver20.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver20.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver20.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver20.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver20.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver20.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver20.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver20.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider20.Add(typeFromHandle40, new XamlTypeResolver(xmlNamespaceResolver20, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider20.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(136, 33)));
			Constraint constraint7 = ((IMarkupExtension<Constraint>)constraintExpression7).ProvideValue((IServiceProvider)xamlServiceProvider20);
			absoluteLayout3.SetValue(RelativeLayout.YConstraintProperty, constraint7);
			VisualDiagnostics.RegisterSourceInfo(constraint7, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 136, 33);
			absoluteLayout3.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 50.0);
			absoluteLayout3.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			bindingExtension11.Path = "LocaliseurButtonTapCommand";
			BindingBase binding11 = ((IMarkupExtension<BindingBase>)bindingExtension11).ProvideValue((IServiceProvider)null);
			tapGestureRecognizer3.SetBinding(TapGestureRecognizer.CommandProperty, binding11);
			absoluteLayout3.GestureRecognizers.Add(tapGestureRecognizer3);
			VisualDiagnostics.RegisterSourceInfo(tapGestureRecognizer3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 140, 26);
			image7.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("localiseur.png"));
			referenceExtension2.Name = "mapView";
			XamlServiceProvider xamlServiceProvider21 = new XamlServiceProvider();
			Type typeFromHandle41 = typeof(IProvideValueTarget);
			object[] array21 = new object[0 + 5];
			array21[0] = image7;
			array21[1] = absoluteLayout3;
			array21[2] = relativeLayout;
			array21[3] = radSideDrawer;
			array21[4] = mainPage;
			object service21;
			xamlServiceProvider21.Add(typeFromHandle41, service21 = new SimpleValueTargetProvider(array21, BindableObject.BindingContextProperty, nameScope));
			xamlServiceProvider21.Add(typeof(IReferenceProvider), service21);
			Type typeFromHandle42 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver21 = new XmlNamespaceResolver();
			xmlNamespaceResolver21.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver21.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver21.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver21.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver21.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver21.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver21.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver21.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider21.Add(typeFromHandle42, new XamlTypeResolver(xmlNamespaceResolver21, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider21.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(143, 28)));
			object obj3 = ((IMarkupExtension)referenceExtension2).ProvideValue((IServiceProvider)xamlServiceProvider21);
			image7.SetValue(BindableObject.BindingContextProperty, obj3);
			VisualDiagnostics.RegisterSourceInfo(obj3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 143, 28);
			staticResourceExtension10.Key = "inverter";
			XamlServiceProvider xamlServiceProvider22 = new XamlServiceProvider();
			Type typeFromHandle43 = typeof(IProvideValueTarget);
			object[] array22 = new object[0 + 6];
			array22[0] = bindingExtension12;
			array22[1] = image7;
			array22[2] = absoluteLayout3;
			array22[3] = relativeLayout;
			array22[4] = radSideDrawer;
			array22[5] = mainPage;
			object service22;
			xamlServiceProvider22.Add(typeFromHandle43, service22 = new SimpleValueTargetProvider(array22, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider22.Add(typeof(IReferenceProvider), service22);
			Type typeFromHandle44 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver22 = new XmlNamespaceResolver();
			xmlNamespaceResolver22.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver22.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver22.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver22.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver22.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver22.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver22.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver22.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider22.Add(typeFromHandle44, new XamlTypeResolver(xmlNamespaceResolver22, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider22.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(144, 28)));
			object target9 = bindingExtension12.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension10).ProvideValue((IServiceProvider)xamlServiceProvider22);
			VisualDiagnostics.RegisterSourceInfo(target9, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 144, 28);
			bindingExtension12.Path = "LocationDisplay.IsEnabled";
			BindingBase binding12 = ((IMarkupExtension<BindingBase>)bindingExtension12).ProvideValue((IServiceProvider)null);
			image7.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding12);
			absoluteLayout3.Children.Add(image7);
			VisualDiagnostics.RegisterSourceInfo(image7, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 142, 22);
			image8.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("localiseurenabled.png"));
			referenceExtension3.Name = "mapView";
			XamlServiceProvider xamlServiceProvider23 = new XamlServiceProvider();
			Type typeFromHandle45 = typeof(IProvideValueTarget);
			object[] array23 = new object[0 + 5];
			array23[0] = image8;
			array23[1] = absoluteLayout3;
			array23[2] = relativeLayout;
			array23[3] = radSideDrawer;
			array23[4] = mainPage;
			object service23;
			xamlServiceProvider23.Add(typeFromHandle45, service23 = new SimpleValueTargetProvider(array23, BindableObject.BindingContextProperty, nameScope));
			xamlServiceProvider23.Add(typeof(IReferenceProvider), service23);
			Type typeFromHandle46 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver23 = new XmlNamespaceResolver();
			xmlNamespaceResolver23.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver23.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver23.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver23.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver23.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver23.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver23.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver23.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider23.Add(typeFromHandle46, new XamlTypeResolver(xmlNamespaceResolver23, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider23.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(146, 28)));
			object obj4 = ((IMarkupExtension)referenceExtension3).ProvideValue((IServiceProvider)xamlServiceProvider23);
			image8.SetValue(BindableObject.BindingContextProperty, obj4);
			VisualDiagnostics.RegisterSourceInfo(obj4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 146, 28);
			bindingExtension13.Path = "LocationDisplay.IsEnabled";
			BindingBase binding13 = ((IMarkupExtension<BindingBase>)bindingExtension13).ProvideValue((IServiceProvider)null);
			image8.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding13);
			absoluteLayout3.Children.Add(image8);
			VisualDiagnostics.RegisterSourceInfo(image8, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 145, 22);
			((ICollection<View>)relativeLayout.Children).Add((View)absoluteLayout3);
			VisualDiagnostics.RegisterSourceInfo(absoluteLayout3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 135, 18);
			flexLayout2.SetValue(RelativeLayout.XConstraintProperty, Constraint.Constant(20.0));
			flexLayout2.SetValue(RelativeLayout.YConstraintProperty, Constraint.Constant(80.0));
			flexLayout2.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			flexLayout2.SetValue(FlexLayout.DirectionProperty, new FlexDirectionTypeConverter().ConvertFromInvariantString("Row"));
			flexLayout2.SetValue(FlexLayout.AlignItemsProperty, new FlexAlignItemsTypeConverter().ConvertFromInvariantString("Center"));
			flexLayout2.SetValue(FlexLayout.JustifyContentProperty, new FlexJustifyTypeConverter().ConvertFromInvariantString("Start"));
			flexLayout2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			imageButton2.SetValue(ImageButton.AspectProperty, Aspect.AspectFit);
			imageButton2.SetValue(View.MarginProperty, new Thickness(0.0, 0.0, 20.0, 0.0));
			imageButton2.SetValue(ImageButton.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("nodata.png"));
			imageButton2.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			bindingExtension14.Path = "MapManager.DataTimeout";
			BindingBase binding14 = ((IMarkupExtension<BindingBase>)bindingExtension14).ProvideValue((IServiceProvider)null);
			imageButton2.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding14);
			bindingExtension15.Path = "DataTimeoutIconTapCommand";
			BindingBase binding15 = ((IMarkupExtension<BindingBase>)bindingExtension15).ProvideValue((IServiceProvider)null);
			imageButton2.SetBinding(ImageButton.CommandProperty, binding15);
			flexLayout2.Children.Add(imageButton2);
			VisualDiagnostics.RegisterSourceInfo(imageButton2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 156, 22);
			imageButton3.SetValue(ImageButton.AspectProperty, Aspect.AspectFit);
			imageButton3.SetValue(ImageButton.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("maxlimit.png"));
			imageButton3.SetValue(Xamarin.Forms.VisualElement.BackgroundColorProperty, Color.Transparent);
			bindingExtension16.Path = "MapManager.VehiculeLimitExceeded";
			BindingBase binding16 = ((IMarkupExtension<BindingBase>)bindingExtension16).ProvideValue((IServiceProvider)null);
			imageButton3.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding16);
			bindingExtension17.Path = "MaxVehiculesIconTapCommand";
			BindingBase binding17 = ((IMarkupExtension<BindingBase>)bindingExtension17).ProvideValue((IServiceProvider)null);
			imageButton3.SetBinding(ImageButton.CommandProperty, binding17);
			flexLayout2.Children.Add(imageButton3);
			VisualDiagnostics.RegisterSourceInfo(imageButton3, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 162, 22);
			((ICollection<View>)relativeLayout.Children).Add((View)flexLayout2);
			VisualDiagnostics.RegisterSourceInfo(flexLayout2, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 149, 18);
			constraintExpression8.Type = ConstraintType.RelativeToParent;
			constraintExpression8.Property = "Width";
			constraintExpression8.Constant = -65.0;
			XamlServiceProvider xamlServiceProvider24 = new XamlServiceProvider();
			Type typeFromHandle47 = typeof(IProvideValueTarget);
			object[] array24 = new object[0 + 4];
			array24[0] = absoluteLayout4;
			array24[1] = relativeLayout;
			array24[2] = radSideDrawer;
			array24[3] = mainPage;
			object service24;
			xamlServiceProvider24.Add(typeFromHandle47, service24 = new SimpleValueTargetProvider(array24, RelativeLayout.XConstraintProperty, nameScope));
			xamlServiceProvider24.Add(typeof(IReferenceProvider), service24);
			Type typeFromHandle48 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver24 = new XmlNamespaceResolver();
			xmlNamespaceResolver24.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver24.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver24.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver24.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver24.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver24.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver24.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver24.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider24.Add(typeFromHandle48, new XamlTypeResolver(xmlNamespaceResolver24, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider24.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(168, 33)));
			Constraint constraint8 = ((IMarkupExtension<Constraint>)constraintExpression8).ProvideValue((IServiceProvider)xamlServiceProvider24);
			absoluteLayout4.SetValue(RelativeLayout.XConstraintProperty, constraint8);
			VisualDiagnostics.RegisterSourceInfo(constraint8, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 168, 33);
			absoluteLayout4.SetValue(RelativeLayout.YConstraintProperty, Constraint.Constant(80.0));
			absoluteLayout4.SetValue(Xamarin.Forms.VisualElement.WidthRequestProperty, 50.0);
			absoluteLayout4.SetValue(Xamarin.Forms.VisualElement.HeightRequestProperty, 50.0);
			bindingExtension18.Path = "DisplayVehiculeDirectionButtonTapCommand";
			BindingBase binding18 = ((IMarkupExtension<BindingBase>)bindingExtension18).ProvideValue((IServiceProvider)null);
			tapGestureRecognizer4.SetBinding(TapGestureRecognizer.CommandProperty, binding18);
			absoluteLayout4.GestureRecognizers.Add(tapGestureRecognizer4);
			VisualDiagnostics.RegisterSourceInfo(tapGestureRecognizer4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 177, 26);
			image9.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("directionoff.png"));
			staticResourceExtension11.Key = "inverter";
			XamlServiceProvider xamlServiceProvider25 = new XamlServiceProvider();
			Type typeFromHandle49 = typeof(IProvideValueTarget);
			object[] array25 = new object[0 + 6];
			array25[0] = bindingExtension19;
			array25[1] = image9;
			array25[2] = absoluteLayout4;
			array25[3] = relativeLayout;
			array25[4] = radSideDrawer;
			array25[5] = mainPage;
			object service25;
			xamlServiceProvider25.Add(typeFromHandle49, service25 = new SimpleValueTargetProvider(array25, typeof(BindingExtension).GetRuntimeProperty("Converter"), nameScope));
			xamlServiceProvider25.Add(typeof(IReferenceProvider), service25);
			Type typeFromHandle50 = typeof(IXamlTypeResolver);
			XmlNamespaceResolver xmlNamespaceResolver25 = new XmlNamespaceResolver();
			xmlNamespaceResolver25.Add("", "http://xamarin.com/schemas/2014/forms");
			xmlNamespaceResolver25.Add("x", "http://schemas.microsoft.com/winfx/2009/xaml");
			xmlNamespaceResolver25.Add("mvvm", "clr-namespace:AntilopeGP.Shared.MVVM");
			xmlNamespaceResolver25.Add("views", "clr-namespace:AntilopeGP.Shared.Views");
			xmlNamespaceResolver25.Add("esriUI", "clr-namespace:Esri.ArcGISRuntime.Xamarin.Forms;assembly=Esri.ArcGISRuntime.Xamarin.Forms");
			xmlNamespaceResolver25.Add("telerikPrimitives", "clr-namespace:Telerik.XamarinForms.Primitives;assembly=Telerik.XamarinForms.Primitives");
			xmlNamespaceResolver25.Add("ios", "clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core");
			xmlNamespaceResolver25.Add("b", "clr-namespace:Prism.Behaviors;assembly=Prism.Forms");
			xamlServiceProvider25.Add(typeFromHandle50, new XamlTypeResolver(xmlNamespaceResolver25, typeof(MainPage).GetTypeInfo().Assembly));
			xamlServiceProvider25.Add(typeof(IXmlLineInfoProvider), new XmlLineInfoProvider(new XmlLineInfo(173, 28)));
			object target10 = bindingExtension19.Converter = (IValueConverter)((IMarkupExtension)staticResourceExtension11).ProvideValue((IServiceProvider)xamlServiceProvider25);
			VisualDiagnostics.RegisterSourceInfo(target10, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 173, 28);
			bindingExtension19.Path = "VehiculeDirectionDisplayed";
			BindingBase binding19 = ((IMarkupExtension<BindingBase>)bindingExtension19).ProvideValue((IServiceProvider)null);
			image9.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding19);
			absoluteLayout4.Children.Add(image9);
			VisualDiagnostics.RegisterSourceInfo(image9, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 172, 22);
			image10.SetValue(Image.SourceProperty, new ImageSourceConverter().ConvertFromInvariantString("directionon.png"));
			bindingExtension20.Path = "VehiculeDirectionDisplayed";
			BindingBase binding20 = ((IMarkupExtension<BindingBase>)bindingExtension20).ProvideValue((IServiceProvider)null);
			image10.SetBinding(Xamarin.Forms.VisualElement.IsVisibleProperty, binding20);
			absoluteLayout4.Children.Add(image10);
			VisualDiagnostics.RegisterSourceInfo(image10, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 174, 22);
			((ICollection<View>)relativeLayout.Children).Add((View)absoluteLayout4);
			VisualDiagnostics.RegisterSourceInfo(absoluteLayout4, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 168, 18);
			radSideDrawer.SetValue(RadSideDrawer.MainContentProperty, relativeLayout);
			VisualDiagnostics.RegisterSourceInfo(relativeLayout, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 30, 14);
			radSideDrawer.SetValue(RadSideDrawer.DrawerContentProperty, popupPage);
			VisualDiagnostics.RegisterSourceInfo(popupPage, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 183, 14);
			mainPage.SetValue(ContentPage.ContentProperty, radSideDrawer);
			VisualDiagnostics.RegisterSourceInfo(radSideDrawer, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 23, 6);
			VisualDiagnostics.RegisterSourceInfo(mainPage, new Uri("Views\\MainPage.xaml", UriKind.RelativeOrAbsolute), 2, 2);
		}

		private void __InitComponentRuntime()
		{
			this.LoadFromXaml(typeof(MainPage));
			This = this.FindByName<ContentPage>("This");
			header = this.FindByName<FlexLayout>("header");
			mapView = this.FindByName<MapView>("mapView");
		}
	}
}
